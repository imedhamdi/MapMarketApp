{
	"info": {
		"_postman_id": "a8c9e47f-f23a-4b9b-8f1d-7b7c2a1c0d3e",
		"name": "MapMarket API",
		"description": "Collection Postman complète pour tester l'API de l'application MapMarket. \n\n**Instructions :**\n1.  Créez un environnement Postman avec les clés : `baseUrl`, `jwt_token_user1`, `userId1`, `jwt_token_user2`, `userId2`, `adId`, `threadId`, `resetToken`, `validationToken`.\n2.  Assurez-vous que votre serveur backend est en cours d'exécution.\n3.  Utilisez le 'Collection Runner' de Postman pour exécuter les dossiers dans l'ordre pour un flux de test complet.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30293888"
	},
	"item": [
		{
			"name": "1. Authentication",
			"description": "Tests pour l'inscription, la connexion et la gestion des comptes utilisateurs.",
			"item": [
				{
					"name": "Sign Up - User 1 (Seller) [SUCCESS]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Génère un email aléatoire pour garantir un nouvel utilisateur à chaque fois",
									"const randomString = Math.random().toString(36).substring(2, 10);",
									"pm.environment.set(\"email_user1\", `seller_${randomString}@mapmarket.com`);",
									"pm.environment.set(\"username_user1\", `seller_${randomString}`);",
									"pm.environment.set(\"password_user1\", \"password123\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response contains token and user data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('token');",
									"    pm.expect(responseData.data).to.have.property('user');",
									"    pm.expect(responseData.data.user).to.have.property('_id');",
									"});",
									"",
									"// Sauvegarde le token et l'ID pour les requêtes suivantes",
									"const responseData = pm.response.json();",
									"pm.environment.set(\"jwt_token_user1\", responseData.token);",
									"pm.environment.set(\"userId1\", responseData.data.user._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_user1}}\",\n    \"email\": \"{{email_user1}}\",\n    \"password\": \"{{password_user1}}\",\n    \"passwordConfirm\": \"{{password_user1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"signup"
							]
						},
						"description": "Crée un premier utilisateur qui agira comme vendeur."
					},
					"response": []
				},
				{
					"name": "Sign Up - User 2 (Buyer) [SUCCESS]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Génère un email aléatoire pour garantir un nouvel utilisateur à chaque fois",
									"const randomString = Math.random().toString(36).substring(2, 10);",
									"pm.environment.set(\"email_user2\", `buyer_${randomString}@mapmarket.com`);",
									"pm.environment.set(\"username_user2\", `buyer_${randomString}`);",
									"pm.environment.set(\"password_user2\", \"password456\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"// Sauvegarde le token et l'ID pour les requêtes suivantes",
									"const responseData = pm.response.json();",
									"pm.environment.set(\"jwt_token_user2\", responseData.token);",
									"pm.environment.set(\"userId2\", responseData.data.user._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_user2}}\",\n    \"email\": \"{{email_user2}}\",\n    \"password\": \"{{password_user2}}\",\n    \"passwordConfirm\": \"{{password_user2}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"signup"
							]
						},
						"description": "Crée un second utilisateur qui agira comme acheteur."
					},
					"response": []
				},
				{
					"name": "Sign Up [ERROR - Email already exists]",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"duplicate_user\",\n    \"email\": \"{{email_user1}}\",\n    \"password\": \"password123\",\n    \"passwordConfirm\": \"password123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login [SUCCESS]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Login successful and token received\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property('token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email_user1}}\",\n    \"password\": \"{{password_user1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login [ERROR - Invalid Credentials]",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email_user1}}\",\n    \"password\": \"wrongpassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Me (Current User) [SUCCESS]",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Me [ERROR - No Token]",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgot Password [SUCCESS]",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{email_user1}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/forgot-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"forgot-password"
							]
						},
						"description": "Simule l'envoi d'un email de réinitialisation. Le token doit être récupéré manuellement pour le test suivant."
					},
					"response": []
				},
				{
					"name": "Reset Password [MANUAL-TEST]",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"newPassword123\",\n    \"passwordConfirm\": \"newPassword123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/reset-password/{{resetToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"reset-password",
								"{{resetToken}}"
							]
						},
						"description": "Nécessite un `resetToken` valide, qui est normalement envoyé par email. Vous devez le récupérer depuis la console du serveur ou la base de données pour que ce test fonctionne."
					},
					"response": []
				},
				{
					"name": "Update Password (Authenticated) [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentPassword\": \"{{password_user1}}\",\n    \"password\": \"newSecurePassword123\",\n    \"passwordConfirm\": \"newSecurePassword123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/auth/update-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"update-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Email [MANUAL-TEST]",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/auth/validate/{{validationToken}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"auth",
								"validate",
								"{{validationToken}}"
							]
						},
						"description": "Nécessite un `validationToken` valide, qui est normalement envoyé par email à l'inscription. Vous devez le récupérer manuellement."
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Ads",
			"description": "Gestion des annonces : création, lecture, mise à jour, suppression.",
			"item": [
				{
					"name": "Create Ad [SUCCESS]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Ad created successfully\", () => {",
									"    const res = pm.response.json();",
									"    pm.expect(res.data.ad).to.have.property('_id');",
									"    pm.expect(res.data.ad.title).to.eql('Superbe vélo de course');",
									"});",
									"",
									"// Sauvegarde l'ID de l'annonce pour les tests suivants",
									"pm.environment.set('adId', pm.response.json().data.ad._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Superbe vélo de course\",\n    \"description\": \"Peu servi, parfait pour les amateurs de vitesse.\",\n    \"price\": 750,\n    \"category\": \"vehicles\",\n    \"location\": {\n        \"type\": \"Point\",\n        \"coordinates\": [2.3522, 48.8566] \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Ads [SUCCESS]",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single Ad [SUCCESS]",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ads/{{adId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ads",
								"{{adId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Ad [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"price\": 720,\n    \"description\": \"Peu servi, parfait pour les amateurs de vitesse. Prix négociable.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ads/{{adId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ads",
								"{{adId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Ad [ERROR - Not owner]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user2}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"price\": 100\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ads/{{adId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ads",
								"{{adId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Ad Images [MANUAL-TEST]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "images",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/ads/{{adId}}/images",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ads",
								"{{adId}}",
								"images"
							]
						},
						"description": "Pour tester, sélectionnez manuellement un ou plusieurs fichiers image dans le champ 'images' du corps de la requête."
					},
					"response": []
				},
				{
					"name": "Find Ads Within Radius [SUCCESS]",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ads/within/10/center/48.8566,2.3522/unit/km",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ads",
								"within",
								"10",
								"center",
								"48.8566,2.3522",
								"unit",
								"km"
							]
						},
						"description": "Recherche les annonces dans un rayon de 10km autour de Paris."
					},
					"response": []
				},
				{
					"name": "Delete Ad [ERROR - Not owner]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ads/{{adId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ads",
								"{{adId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Ad [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ads/{{adId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ads",
								"{{adId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. Favorites",
			"description": "Gestion des favoris.",
			"item": [
				{
					"name": "[SETUP] Create Ad to be favorited",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Sauvegarde l'ID de l'annonce pour les tests suivants",
									"pm.environment.set('adId', pm.response.json().data.ad._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Annonce pour favoris\",\n    \"description\": \"Test favoris\",\n    \"price\": 10,\n    \"category\": \"other\",\n    \"location\": {\n        \"type\": \"Point\",\n        \"coordinates\": [2.35, 48.85] \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Ad to Favorites [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/favorites/{{adId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"favorites",
								"{{adId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User's Favorites [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user2}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/favorites",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"favorites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Ad from Favorites [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/favorites/{{adId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"favorites",
								"{{adId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "4. Messaging",
			"description": "Gestion de la messagerie entre utilisateurs.",
			"item": [
				{
					"name": "[SETUP] Create Ad for messaging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('adId', pm.response.json().data.ad._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Annonce pour messagerie\",\n    \"description\": \"Test messagerie\",\n    \"price\": 25,\n    \"category\": \"other\",\n    \"location\": {\n        \"type\": \"Point\",\n        \"coordinates\": [2.30, 48.80] \n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/ads",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ads"
							]
						}
					},
					"response": []
				},
				{
					"name": "Start a Conversation (User 2 to User 1) [SUCCESS]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 Created\", () => { pm.response.to.have.status(201); });",
									"const res = pm.response.json();",
									"pm.environment.set('threadId', res.data.thread._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user2}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Bonjour, votre annonce m'intéresse !\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/messages/start/{{adId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages",
								"start",
								"{{adId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reply to a Conversation (User 1 to User 2) [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Bonjour ! Il est toujours disponible.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/messages/{{threadId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages",
								"{{threadId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Threads for User 1 [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/messages",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Specific Thread [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/messages/{{threadId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"messages",
								"{{threadId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "5. Users & Profiles",
			"description": "Gestion des profils utilisateurs, blocage.",
			"item": [
				{
					"name": "Get All Users [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Profile by ID [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId2}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Own Profile (Me) [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username_user1}}_updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Block User [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId2}}/block",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId2}}",
								"block"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unblock User [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/{{userId2}}/unblock",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"{{userId2}}",
								"unblock"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Own Profile (Me) [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user2}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"me"
							]
						},
						"description": "Supprime le profil de l'utilisateur 2. Les tests suivants utilisant ce compte échoueront."
					},
					"response": []
				}
			]
		},
		{
			"name": "6. Notifications & Settings",
			"description": "Gestion des notifications et des paramètres utilisateur.",
			"item": [
				{
					"name": "Get Notifications [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Settings [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/settings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Settings [SUCCESS]",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token_user1}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"notifications\": {\n        \"newMessages\": false,\n        \"newFavorites\": true\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/settings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"settings"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{jwt_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}
